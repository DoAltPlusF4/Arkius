"""
Contains premade tilesets for rooms.

Tilesets should be dictionaries in the format {(X, Y): TileValue}

Tile values:
0 = Empty (Plain floor)
1 = Wall
2 = Pit
3 = Bridge
"""

import random


def basic():
    """Full floor."""
    tileset = {
        (0, 0): 0, (1, 0): 0, (2, 0): 0, (3, 0): 0, (4, 0): 0, (5, 0): 0, (6, 0): 0,  # noqa: E501
        (0, 1): 0, (1, 1): 0, (2, 1): 0, (3, 1): 0, (4, 1): 0, (5, 1): 0, (6, 1): 0,  # noqa: E501
        (0, 2): 0, (1, 2): 0, (2, 2): 0, (3, 2): 0, (4, 2): 0, (5, 2): 0, (6, 2): 0,  # noqa: E501
        (0, 3): 0, (1, 3): 0, (2, 3): 0, (3, 3): 0, (4, 3): 0, (5, 3): 0, (6, 3): 0,  # noqa: E501
        (0, 4): 0, (1, 4): 0, (2, 4): 0, (3, 4): 0, (4, 4): 0, (5, 4): 0, (6, 4): 0,  # noqa: E501
        (0, 5): 0, (1, 5): 0, (2, 5): 0, (3, 5): 0, (4, 5): 0, (5, 5): 0, (6, 5): 0,  # noqa: E501
        (0, 6): 0, (1, 6): 0, (2, 6): 0, (3, 6): 0, (4, 6): 0, (5, 6): 0, (6, 6): 0  # noqa: E501
    }
    return tileset


def cornerPits():
    """4 pits in the corner."""
    tileset = {
        (0, 0): 0, (1, 0): 0, (2, 0): 0, (3, 0): 0, (4, 0): 0, (5, 0): 0, (6, 0): 0,  # noqa: E501
        (0, 1): 0, (1, 1): 2, (2, 1): 2, (3, 1): 0, (4, 1): 2, (5, 1): 2, (6, 1): 0,  # noqa: E501
        (0, 2): 0, (1, 2): 2, (2, 2): 0, (3, 2): 0, (4, 2): 0, (5, 2): 2, (6, 2): 0,  # noqa: E501
        (0, 3): 0, (1, 3): 0, (2, 3): 0, (3, 3): 0, (4, 3): 0, (5, 3): 0, (6, 3): 0,  # noqa: E501
        (0, 4): 0, (1, 4): 2, (2, 4): 0, (3, 4): 0, (4, 4): 0, (5, 4): 2, (6, 4): 0,  # noqa: E501
        (0, 5): 0, (1, 5): 2, (2, 5): 2, (3, 5): 0, (4, 5): 2, (5, 5): 2, (6, 5): 0,  # noqa: E501
        (0, 6): 0, (1, 6): 0, (2, 6): 0, (3, 6): 0, (4, 6): 0, (5, 6): 0, (6, 6): 0  # noqa: E501
    }
    return tileset


def startRoom():
    """Bevelled corners and pit ring. Bridge at North side."""
    tileset = {
        (0, 0): 1, (1, 0): 2, (2, 0): 2, (3, 0): 3, (4, 0): 2, (5, 0): 2, (6, 0): 1,  # noqa: E501
        (0, 1): 2, (1, 1): 2, (2, 1): 0, (3, 1): 0, (4, 1): 0, (5, 1): 2, (6, 1): 2,  # noqa: E501
        (0, 2): 2, (1, 2): 0, (2, 2): 0, (3, 2): 0, (4, 2): 0, (5, 2): 0, (6, 2): 2,  # noqa: E501
        (0, 3): 2, (1, 3): 0, (2, 3): 0, (3, 3): 0, (4, 3): 0, (5, 3): 0, (6, 3): 2,  # noqa: E501
        (0, 4): 2, (1, 4): 0, (2, 4): 0, (3, 4): 0, (4, 4): 0, (5, 4): 0, (6, 4): 2,  # noqa: E501
        (0, 5): 2, (1, 5): 2, (2, 5): 0, (3, 5): 0, (4, 5): 0, (5, 5): 2, (6, 5): 2,  # noqa: E501
        (0, 6): 1, (1, 6): 2, (2, 6): 2, (3, 6): 2, (4, 6): 2, (5, 6): 2, (6, 6): 1  # noqa: E501
    }
    return tileset


def treasureRoom():
    """Island in centre. Bridges on either side."""
    tileset = {
        (0, 0): 0, (1, 0): 0, (2, 0): 0, (3, 0): 0, (4, 0): 0, (5, 0): 0, (6, 0): 0,  # noqa: E501
        (0, 1): 0, (1, 1): 1, (2, 1): 0, (3, 1): 0, (4, 1): 0, (5, 1): 1, (6, 1): 0,  # noqa: E501
        (0, 2): 0, (1, 2): 0, (2, 2): 2, (3, 2): 3, (4, 2): 2, (5, 2): 0, (6, 2): 0,  # noqa: E501
        (0, 3): 0, (1, 3): 0, (2, 3): 3, (3, 3): 0, (4, 3): 3, (5, 3): 0, (6, 3): 0,  # noqa: E501
        (0, 4): 0, (1, 4): 0, (2, 4): 2, (3, 4): 3, (4, 4): 2, (5, 4): 0, (6, 4): 0,  # noqa: E501
        (0, 5): 0, (1, 5): 1, (2, 5): 0, (3, 5): 0, (4, 5): 0, (5, 5): 1, (6, 5): 0,  # noqa: E501
        (0, 6): 0, (1, 6): 0, (2, 6): 0, (3, 6): 0, (4, 6): 0, (5, 6): 0, (6, 6): 0  # noqa: E501
    }
    return tileset


def bossRoom():
    """8 walls."""
    tileset = {
        (0, 0): 0, (1, 0): 0, (2, 0): 0, (3, 0): 0, (4, 0): 0, (5, 0): 0, (6, 0): 0,  # noqa: E501
        (0, 1): 0, (1, 1): 1, (2, 1): 0, (3, 1): 1, (4, 1): 0, (5, 1): 1, (6, 1): 0,  # noqa: E501
        (0, 2): 0, (1, 2): 0, (2, 2): 0, (3, 2): 0, (4, 2): 0, (5, 2): 0, (6, 2): 0,  # noqa: E501
        (0, 3): 0, (1, 3): 1, (2, 3): 0, (3, 3): 0, (4, 3): 0, (5, 3): 1, (6, 3): 0,  # noqa: E501
        (0, 4): 0, (1, 4): 0, (2, 4): 0, (3, 4): 0, (4, 4): 0, (5, 4): 0, (6, 4): 0,  # noqa: E501
        (0, 5): 0, (1, 5): 1, (2, 5): 0, (3, 5): 1, (4, 5): 0, (5, 5): 1, (6, 5): 0,  # noqa: E501
        (0, 6): 0, (1, 6): 0, (2, 6): 0, (3, 6): 0, (4, 6): 0, (5, 6): 0, (6, 6): 0  # noqa: E501
    }
    return tileset


def generateRandom(wallChance=10, pitChance=15, wallSize=15, pitSize=40):
    """Generate a random tileset."""
    tileset = {
        (0, 0): 0, (1, 0): 0, (2, 0): 0, (3, 0): 0, (4, 0): 0, (5, 0): 0, (6, 0): 0,  # noqa: E501
        (0, 1): 0, (1, 1): 0, (2, 1): 0, (3, 1): 0, (4, 1): 0, (5, 1): 0, (6, 1): 0,  # noqa: E501
        (0, 2): 0, (1, 2): 0, (2, 2): 0, (3, 2): 0, (4, 2): 0, (5, 2): 0, (6, 2): 0,  # noqa: E501
        (0, 3): 0, (1, 3): 0, (2, 3): 0, (3, 3): 0, (4, 3): 0, (5, 3): 0, (6, 3): 0,  # noqa: E501
        (0, 4): 0, (1, 4): 0, (2, 4): 0, (3, 4): 0, (4, 4): 0, (5, 4): 0, (6, 4): 0,  # noqa: E501
        (0, 5): 0, (1, 5): 0, (2, 5): 0, (3, 5): 0, (4, 5): 0, (5, 5): 0, (6, 5): 0,  # noqa: E501
        (0, 6): 0, (1, 6): 0, (2, 6): 0, (3, 6): 0, (4, 6): 0, (5, 6): 0, (6, 6): 0  # noqa: E501
    }

    originalWallChance = wallChance
    originalPitChance = pitChance
    nearDoor = [
        (6, 2), (6, 3), (6, 4),
        (2, 6), (3, 6), (4, 6),
        (0, 2), (0, 3), (0, 4),
        (2, 0), (3, 0), (4, 0)
    ]

    for y in range(7):
        for x in range(7):
            if x != 6 and tileset[(x+1, y)] == 2:
                pitChance += pitSize
            if x != 0 and tileset[(x-1, y)] == 2:
                pitChance += pitSize
            if y != 6 and tileset[(x, y+1)] == 2:
                pitChance += pitSize
            if y != 0 and tileset[(x, y-1)] == 2:
                pitChance += pitSize

            if x == 0 or x == 6 or y == 0 or y == 6:
                pitChance = pitChance / 2

            if (x, y) in nearDoor:
                pitChance = pitChance / 4

            if random.random() * 100 < pitChance:
                tileset[(x, y)] = 2

            pitChance = originalPitChance

            if x != 6 and tileset[(x+1, y)] == 1:
                wallChance += wallSize
            if x != 0 and tileset[(x-1, y)] == 1:
                wallChance += wallSize
            if y != 6 and tileset[(x, y+1)] == 1:
                wallChance += wallSize
            if y != 0 and tileset[(x, y-1)] == 1:
                wallChance += wallSize

            if (x, y) in nearDoor:
                wallChance = wallChance / 4

            if random.random() * 100 < wallChance:
                tileset[(x, y)] = 1

            wallChance = originalWallChance

    return tileset
